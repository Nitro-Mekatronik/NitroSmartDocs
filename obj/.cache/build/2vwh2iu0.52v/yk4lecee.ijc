<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Default database schema </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Default database schema ">
    <meta name="generator" content="docfx 2.59.4.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <link rel="preload" href="../../../fonts/fonts.css" )"="" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <meta property="docfx:navrel" content="/">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    <meta property="docfx:rel" content="../../../">
    
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-7490022-8"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-7490022-8');
    </script>
    <script>
      /*! loadCSS. [c]2017 Filament Group, Inc. MIT License
      - testing support for link[rel=preload]
      - enabling async CSS loading in browsers that do not support rel=preload
      - applying rel preload css once loaded, whether supported or not.
      */
      !function(n){"use strict";n.loadCSS||(n.loadCSS=function(){});var o=loadCSS.relpreload={};if(o.support=function(){var e;try{e=n.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),o.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.addEventListener?t.removeEventListener("load",a):t.attachEvent&&t.detachEvent("onload",a),t.setAttribute("onload",null),t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},o.poly=function(){if(!o.support())for(var t=n.document.getElementsByTagName("link"),e=0;e<t.length;e++){var a=t[e];"preload"!==a.rel||"style"!==a.getAttribute("as")||a.getAttribute("data-loadcss")||(a.setAttribute("data-loadcss",!0),o.bindMediaToggle(a))}},!o.support()){o.poly();var t=n.setInterval(o.poly,500);n.addEventListener?n.addEventListener("load",function(){o.poly(),n.clearInterval(t)}):n.attachEvent&&n.attachEvent("onload",function(){o.poly(),n.clearInterval(t)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:n.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
    </script>
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="170">
    <div id="wrapper">
      <header>
        <div class="container">
          <div id="header" class="header navbar-header">
            <div class="header-logo">
              <a href="https://www.nopcommerce.com/">
                <img id="logo" class="svg" src="../../../logo.png" alt="">
              </a>
            </div>  </div>
          <div class="navbar-collapse collapse in">
            <form class="navbar-form navbar-right" role="search" id="search">
              <div class="form-group">
                <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
              </div>
        
              <div class="form-group lang-container">
                    
                    <select id="lang-switcher" class="select-css">
                        <option value="/en/index.html" selected="">
                          English
                        
                    </select>        </div>
            </form>
          </div>
        </div>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list">Search Results for <span></span></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="en/developer/tutorials/db-schema">
<h1 id="default-database-schema" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="8">Default database schema</h1>

<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="10">In this article, we will look at the database schema that is installed during initial installation and which remains unchanged in 90% of cases.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="12">We won't bring the entire schema as a whole but will describe the default installation that provides for the creation of 126 tables.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="14">To understand such a scheme easily let's split it into parts. Below, we grouped the tables most naturally and understandably:</p>
<ul sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="16">
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="16"><a href="#customers-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="16">Customers info</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="17"><a href="#products-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="17">Products info</a>
<ul sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="18">
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="18"><a href="#product-attributes" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="18">Product attributes</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="19"><a href="#tier-price" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="19">Tier price</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="20"><a href="#inventory-by-warehouses" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="20">Inventory by warehouses</a></li>
</ul>
</li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="21"><a href="#orders" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="21">Orders</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="22"><a href="#shipments" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="22">Shipments</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="23"><a href="#discounts" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="23">Discounts</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="24"><a href="#shopping-cart" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="24">Shopping cart</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="25"><a href="#addresses" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="25">Addresses</a></li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="26"><a href="#database-naming-convention" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="26">Database naming convention</a></li>
</ul>
<h2 id="customers-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="28">Customers info</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="30"><img src="_static/db-schema/customers-info.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="30" alt="Customers info"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="32">This diagram shows a set of tables that contain basic customer information. It also indicates the direction of links.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="34">We won't delve into the purpose of tables and fields, since their names are self-descriptive enough.</p>
<h3 id="features-customers-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="36">Features (Customers info)</h3>
<ul sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="38">
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="38"><p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="38">In the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="38">Customer</strong> table we have three fields which in fact should be defined as foreign keys but in practice, they are not:</p>
<ol sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="39">
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="39">AffiliateId</li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="40">VendorId</li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="41">RegisteredInStoreId</li>
</ol>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="43">This is done intentionally so as not to overload the system with unnecessary connections, since these fields are not used in every online store.</p>
</li>
<li sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="45"><p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="45">Some of the user data is stored in the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="45">GenericAttribute</strong> table. You can find all of them at <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="45">\src\Libraries\Nop.Core\Domain\Customers\NopCustomerDefaults.cs</code>.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="47">The structure of this table is presented below:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="49"><img src="_static/db-schema/generic-attribute.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="49" alt="GenericAttribute"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="51">Besides the mentioned customer data, this table can store any data for other entities as well. We added this table on purpose so that you could extend any entity without changing the structure of the tables.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="53">Additionally, this table stores custom <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="53">Customer attributes</strong> and <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="53">Vendor attributes</strong> with the chosen values for vendors and customers in the XML format. See the following rows to understand what it looks like:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="55"><img src="_static/db-schema/xml.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="55" alt="Xml"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="57">On the example of the XML string from the <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="57">Value</em> column we can see how exactly the attribute values are stored for a certain vendor:</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="59">&lt;Attributes&gt;&lt;VendorAttribute ID=&quot;2&quot;&gt;&lt;VendorAttributeValue&gt;&lt;Value&gt;1&lt;/Value&gt;&lt;/VendorAttributeValue&gt;&lt;/VendorAttribute&gt;&lt;/Attributes&gt;
</code></pre>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="63">As you can see the vendor with ID 1 has only one vendor attribute filled. This attribute has ID 2 and its value is 1.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="65">Custom customer attributes have the same structure as vendor attributes. The following screenshot represents the relationships between <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="65">Customer attributes</strong> and <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="65">Vendor attributes</strong> and their values:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="67"><img src="_static/db-schema/attributes.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="67" alt="Xml"></p>
</li>
</ul>
<h2 id="products-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="69">Products info</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="71"><img src="_static/db-schema/products-info.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="71" alt="Products info"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="73">In the diagram, you can see the base data for the product (the schema of the product information table below). As a rule, this data is used in 99% of cases.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="75"><img src="_static/db-schema/product.png" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="75" alt="Product table"></p>
<h3 id="features-products-info" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="77">Features (Products info)</h3>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="79">Depending on the store settings, additional tables may be connected to this scheme. For example, to distribute product quantity among multiple warehouses.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="81"><img src="_static/db-schema/warehouse.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="81" alt="Product table"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="83">Or if you want to use the product reviews functionality:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="85"><img src="_static/db-schema/product-review.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="85" alt="Product table"></p>
<h3 id="product-attributes" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="87">Product attributes</h3>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="89">Then let's consider the scheme of attributes and their combinations presented below:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="91"><img src="_static/db-schema/product-attributes.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="91" alt="Product attributes"></p>
<h3 id="tier-price" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="93">Tier price</h3>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="95">If you use tier pricing for products you should also pay attention to the following scheme:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="97"><img src="_static/db-schema/tier-price.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="97" alt="Tier price"></p>
<h3 id="inventory-by-warehouses" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="99">Inventory by warehouses</h3>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="101">Although this feature is not used often, it might be useful to give a scheme for accounting for goods in a particular warehouse:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="103"><img src="_static/db-schema/stock-quantity-history.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="103" alt="Inventory by warehouses"></p>
<h2 id="orders" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="105">Orders</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="107"><img src="_static/db-schema/orders.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="107" alt="orders"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="109">In this diagram, we can see the tables related to the order data. The <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="109">Order</strong> table has the following structure:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="111"><img src="_static/db-schema/order.png" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="111" alt="order"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="113">There is no need to comment on anything since everything should be clear from the diagram and the names of the fields are self-descriptive enough. It should only be noted that the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="113">RewardPointsHistory</strong> table is used only if the <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="113">Reward points system</em> is activated for the store.</p>
<h2 id="shipments" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="115">Shipments</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="117"><img src="_static/db-schema/shipments.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="117" alt="shipments"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="119">The purpose of all tables in the diagram, as before, raises no questions. Nevertheless, let's dwell on a few points. The <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="119">ShippingMethod</strong> table is used to manage the list of connected plugins, and the specific shipping method is stored in the <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="119">ShippingRateComputationMethodSystemName</em> and <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="119">ShippingMethod</em> fields of the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="119">Order</strong> table.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="121">The <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="121">OrderItemId</em> field of the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="121">ShipmentItem</strong> table is essentially a reference to the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="121">OrderItem</strong> table.</p>
<h2 id="discounts" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="123">Discounts</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="125"><img src="_static/db-schema/discounts.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="125" alt="discounts"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="127">From the diagram above, we can see that discounts can be applied to three groups: <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="127">Products</strong>, <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="127">Manufacturers</strong>, <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="127">Categories</strong>
And can be configured with various rules which are controlled by plugins (<code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="128">IDiscountRequirementRule</code>).</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="130">In the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="130">DiscountRequirement</strong> table, the <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="130">InteractionTypeId</em> field must contain one of the values specified in the <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="130">RequirementGroupInteractionType</code> enumeration:</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="132">/// &lt;summary&gt;
/// Represents an interaction type within the group of requirements
/// &lt;/summary&gt;
public enum RequirementGroupInteractionType
{
    /// &lt;summary&gt;
    /// All requirements within the group must be met
    /// &lt;/summary&gt;
    And = 0,

    /// &lt;summary&gt;
    /// At least one of the requirements within the group must be met 
    /// &lt;/summary&gt;
    Or = 2
}
</code></pre>
<h2 id="shopping-cart" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="150">Shopping cart</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="152">Another important part of the store is a shopping cart. In our case the scheme of this mechanism is very simple:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="154"><img src="_static/db-schema/shopping-cart-item.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="154" alt="Shopping cart"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="156">The only thing worth noting is that this scheme is also used for a wishlist. To separate these two types, the <em sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="156">ShoppingCartTypeId</em> field is used. The values in this field must match the values from the <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="156">ShoppingCartType</strong> enumeration:</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="158">/// &lt;summary&gt;
/// Represents a shopping cart type
/// &lt;/summary&gt;
public enum ShoppingCartType
{
    /// &lt;summary&gt;
    /// Shopping cart
    /// &lt;/summary&gt;
    ShoppingCart = 1,

    /// &lt;summary&gt;
    /// Wishlist
    /// &lt;/summary&gt;
    Wishlist = 2
}
</code></pre>
<h2 id="addresses" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="176">Addresses</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="178">Perhaps you will also be interested in the table schema involved in storing addresses, both delivery, and the customer addresses:</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="180"><img src="_static/db-schema/addresses.jpg" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="180" alt="addresses"></p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="182">As you understand, the standard installation includes much more tables. We don't describe them all, since many of them have no connections and serve only for a specific purpose, while others are used very rarely.</p>
<h2 id="database-naming-convention" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="184">Database naming convention</h2>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="186">You may have noticed that the database uses a mixed approach to naming of tables and columns (with <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="186">_</code> char, without <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="186">_</code>, CamelCase). Long time ago we used <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="186">_</code> char. But now we've completely switched to using <strong sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="186">CamelCase</strong> notation. But we decide not to change names of the existing tables or columns because many of our users already could write a huge amount of their custom scripts that would inevitably stop working.</p>
<p sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="188">For backward compatibility with the new standards, we added the <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="188">INameCompatibility</code> interface which allows you to redefine the names of tables and columns for the correct mapping of objects with tables created according to the old naming standards. You can see the complete list of overrides in the <a href="https://github.com/nopSolutions/nopCommerce/blob/develop/src/Libraries/Nop.Data/Mapping/BaseNameCompatibility.cs" sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="188">BaseNameCompatibility</a> class from the <code sourcefile="en/developer/tutorials/db-schema.md" sourcestartlinenumber="188">Nop.Data.Mapping</code> namespace.</p>

                  <div class="course-banner">
                      <a target="_blank" href="https://www.nopcommerce.com/training?utm_source=docs_nopcommerce&utm_medium=documentation&utm_campaign=course&utm_content=Developers_Guide">
                          <div class="course-banner-left"></div>
                          <div class="course-banner-center">
                              <div class="course-banner-title"><span>nopCommerce training course</span></div>
                              <div class="course-banner-description"><span>Start developing your skills and become a Certified Developer</span></div>
                          </div>
                          <div class="course-banner-right"></div>
                      </a> 
                  </div>            </article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/nopSolutions/nopCommerce-Docs/blob/master/en/developer/tutorials/db-schema.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>

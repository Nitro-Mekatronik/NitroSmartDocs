<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Guide to creating a page containing a reporting table of DataTables </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Guide to creating a page containing a reporting table of DataTables ">
    <meta name="generator" content="docfx 2.59.4.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <link rel="preload" href="../../../fonts/fonts.css" )"="" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <meta property="docfx:navrel" content="/">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    <meta property="docfx:rel" content="../../../">
    
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-7490022-8"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-7490022-8');
    </script>
    <script>
      /*! loadCSS. [c]2017 Filament Group, Inc. MIT License
      - testing support for link[rel=preload]
      - enabling async CSS loading in browsers that do not support rel=preload
      - applying rel preload css once loaded, whether supported or not.
      */
      !function(n){"use strict";n.loadCSS||(n.loadCSS=function(){});var o=loadCSS.relpreload={};if(o.support=function(){var e;try{e=n.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),o.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.addEventListener?t.removeEventListener("load",a):t.attachEvent&&t.detachEvent("onload",a),t.setAttribute("onload",null),t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},o.poly=function(){if(!o.support())for(var t=n.document.getElementsByTagName("link"),e=0;e<t.length;e++){var a=t[e];"preload"!==a.rel||"style"!==a.getAttribute("as")||a.getAttribute("data-loadcss")||(a.setAttribute("data-loadcss",!0),o.bindMediaToggle(a))}},!o.support()){o.poly();var t=n.setInterval(o.poly,500);n.addEventListener?n.addEventListener("load",function(){o.poly(),n.clearInterval(t)}):n.attachEvent&&n.attachEvent("onload",function(){o.poly(),n.clearInterval(t)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:n.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
    </script>
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="170">
    <div id="wrapper">
      <header>
        <div class="container">
          <div id="header" class="header navbar-header">
            <div class="header-logo">
              <a href="https://www.nopcommerce.com/">
                <img id="logo" class="svg" src="../../../logo.png" alt="">
              </a>
            </div>  </div>
          <div class="navbar-collapse collapse in">
            <form class="navbar-form navbar-right" role="search" id="search">
              <div class="form-group">
                <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
              </div>
        
              <div class="form-group lang-container">
                    
                    <select id="lang-switcher" class="select-css">
                        <option value="/en/index.html" selected="">
                          English
                        
                    </select>        </div>
            </form>
          </div>
        </div>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list">Search Results for <span></span></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables">
<h1 id="guide-to-creating-a-page-containing-a-reporting-table-of-datatables" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="8">Guide to creating a page containing a reporting table of DataTables</h1>

<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="10">In this tutorial, we will be learning about how to extend the functionality of the nopCommerce with custom functionality for the admin panel, and create a page containing a table with some data as a report. So before starting on this tutorial you need to have some prior knowledge and understanding of some of the topics.</p>
<ul sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="12">
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="12"><a class="xref" href="source-code-organization.html" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="12">nopCommerce architecture</a>.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="13"><a class="xref" href="guide-to-expanding-the-functionality-of-the-basic-functions-of-nop-commerce-through-a-plugin.html" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="13">nopCommerce Plugin</a>.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="14"><a class="xref" href="register-new-routes.html" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="14">nopCommerce routing</a>.</li>
</ul>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="16">If you are not familiar with the above topics, we highly recommend you to learn about those first.</p>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="18">So, this tutorial will show you how to create a table that displays information about the distribution of users by country (based on billing address). Let's walk through the step-by-step process of creating the aforementioned functionality.</p>
<h2 id="create-a-nopcommerce-plugin-project" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="20">Create a nopCommerce plugin project</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="22">I am assuming that you already know where and how to create a nopCommerce plugin project and configure the project according to nopCommerce standards. If you don't know then you can visit <a class="xref" href="../plugins/how-to-write-plugin-4.60.html" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="22">this page</a> link to know how to create and configure the nopCommerce plugin project.</p>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="24">If you have followed the above-provided link to create and configure your plugin project then you may end up with a folder structure like this.</p>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="26"><img src="_static/guide-to-creating-a-page-containing-a-reporting-table-of-datatables/image1.png" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="26" alt="image1"></p>
<h2 id="models-customersdistributioncs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="28">#Models/ CustomersDistribution.cs</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="30">First let's create a model named <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="30">CustomersDistribution</strong> inside <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="30">Models</strong> folder.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="32">public record CustomersDistribution : BaseNopModel
{
    /// &lt;summary&gt;
    /// Country based on the billing address.
    /// &lt;/summary&gt;
    public string Country { get; set; }

    /// &lt;summary&gt;
    /// Number of customers from specific country.
    /// &lt;/summary&gt;
    public int NoOfCustomers { get; set; }
}
</code></pre>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="47">Also let's add the search model named <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="47">CustomersByCountrySearchModel</code> inside <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="47">Models</em> folder.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="49">public record CustomersByCountrySearchModel : BaseSearchModel
{
}
</code></pre>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="55">nopCommerce uses the repository pattern for data access which is ideal for dependency injection mechanism.</p>
<h2 id="services-icustomersbycountrycs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="57">#Services/ ICustomersByCountry.cs</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="59">Now let us create a service that fetches required data from a database. For service, we will create an Interface and create a service class implementing that interface.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="61">public interface ICustomersByCountry
{
    Task&lt;List&lt;CustomersDistribution&gt;&gt; GetCustomersDistributionByCountryAsync()
}
</code></pre>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="68">Here we have only one method description since for the sake of this plugin we do not need any other methods.</p>
<h2 id="services-customersbycountrycs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="70">#Services/ CustomersByCountry.cs</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="72">Here we are creating a class named <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="72">CustomersByCountry</strong> which is inherent from <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="72">ICustomersByCountry</strong> interface.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="74">public class CustomersByCountry : ICustomersByCountry
{
    private readonly IAddressService _addressService;
    private readonly ICountryService _countryService;
    private readonly ICustomerService _customerService;

    public CustomersByCountry(IAddressService addressService, 
        ICountryService countryService,
        ICustomerService customerService)
    {
        _addressService = addressService;
        _countryService = countryService;
        _customerService = customerService;
    }

    public async Task&lt;List&lt;CustomersDistribution&gt;&gt; GetCustomersDistributionByCountryAsync()
    {
        return await _customerService.GetAllCustomersAsync()
            .Where(c =&gt; c.ShippingAddressId != null)
            .Select(c =&gt; new
            {
                await (_countryService.GetCountryByAddressAsync(_addressService.GetAddressById(c.ShippingAddressId ?? 0))).Name,
                c.Username
            })
            .GroupBy(c =&gt; c.Name)
            .Select(cbc =&gt; new CustomersDistribution { Country = cbc.Key, NoOfCustomers = cbc.Count() }).ToList();
    }
}
</code></pre>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="105">Also, we are implementing the method that retrieves data from the database. We used this approach so that we can use dependency injection techniques to inject this service into the controller.</p>
<h2 id="controllerscustomersbycountrycontrollercs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="107">#Controllers/CustomersByCountryController.cs</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="109">Now let's create a controller class. A good practice to name plugin controllers is like <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="109">{Group}{Name}Controller.cs</em>. For example, TutorialCustomersByCountryController, here <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="109">{Tutorial}{CustomersByCountry}Controller</em>. But remember that it is not a requirement to name the controller with <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="109">{Group}{Name}</em> it is just recommended way by nopCommerce for naming convention but the Controller part in the name is the requirement of .Net MVC.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="111">    [AutoValidateAntiforgeryToken]
    [AuthorizeAdmin] //confirms access to the admin panel
    [Area(AreaNames.Admin)] //specifies the area containing a controller or action
    public class DistOfCustByCountryPluginController : BasePluginController
    {
        private readonly ICustomersByCountry _service;
        public DistOfCustByCountryPluginController(ICustomersByCountry service)
        {
            _service = service;
        }

        [HttpGet]
        public IActionResult Configure()
        {
            CustomersByCountrySearchModel customerSearchModel = new CustomersByCountrySearchModel
            {
                AvailablePageSizes = &quot;10&quot;
            };
            return View(&quot;~/Plugins/Tutorial.DistOfCustByCountry/Views/Configure.cshtml&quot;, customerSearchModel);
        }

        [HttpPost]
        public async Task&lt;IActionResult&gt; GetCustomersCountByCountry()
        {
            try
            {
                return Ok(new DataTablesModel { Data = await _service.GetCustomersDistributionByCountryAsync() });
            }
            catch (Exception ex)
            {
                return BadRequest(ex);
            }
        }
    }
</code></pre>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">In the controller, we are injecting the <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">ICustomersByCountry</strong> service we created previously to get data from a database. Here we have created two Actions one is of type <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">HttpGet</code> and another of type <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">HttpPost</code>. The <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">Configure</code> action is returning a view named &quot;Configure.cshtml&quot; which we haven't created yet. And <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">GetCustomersCountByCountry</code> action which is using an injected service to retrieve data and returning data in the JSON format. This action is going to be called by the data table which expects a response as <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="148">DataTablesModel</code> object. However, here we are setting the data property which is the data that will be rendered in the table.</p>
<h2 id="views-configurecshtml" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="150">#Views/ Configure.cshtml</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="152">Now let's create a view with <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="152">DataTables</em> where we can display our data which then can be viewed by our users.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="154">@using Nop.Web.Framework.Models.DataTables
@{
    Layout = &quot;_ConfigurePlugin&quot;;
}

@await Html.PartialAsync(&quot;Table&quot;, new DataTablesModel
{
    Name = &quot;customersDistributionByCountry-grid&quot;,
    UrlRead = new DataUrl(&quot;GetCustomersCountByCountry&quot;, &quot;TutorialCustomersByCountry&quot;),
    Paging = false,
    ColumnCollection = new List&lt;ColumnProperty&gt;
    {
        new ColumnProperty(nameof(CustomersDistribution.Country))
        {
            Title = &quot;Country&quot;,
            Width = &quot;300&quot;
        },
        new ColumnProperty(nameof(CustomersDistribution.NoOfCustomers))
        {
            Title = &quot;Number Of Customers&quot;,
            Width = &quot;100&quot;
        }
    }
})
</code></pre>
<h2 id="views_viewimportscshtml" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="181">#Views/_ViewImports.cshtml</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="183">A <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="183">_ViewImports.cshtml</em> file contains code to import all required references for our view files.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="185">@inherits Nop.Web.Framework.Mvc.Razor.NopRazorPage&lt;TModel&gt;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Nop.Web.Framework

@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using Nop.Web.Framework.UI
@using Nop.Web.Framework.Extensions
@using System.Text.Encodings.Web
@using Nop.Plugin.Tutorial.DistOfCustByCountry.Models
@using Nop.Web.Framework.Models.DataTables;
@using Microsoft.AspNetCore.Routing;
</code></pre>
<ul sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">In <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">Configure.cshtml</code> we are using a partial view named <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199"><code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">Table</code></strong>. This is the nopCommerce implementation of <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">JQuery DataTables</em>. We can find this file under <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">Nop.Web/Areas/Admin/Views/Shared/Table.cshtml</code>. There you can see the code for implementation of <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">DataTables</em>. This view model takes a <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">DataTablesModel</code> class for the configuration of <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">DataTables</em>. Let's explain the property we have set for the <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="199">DataTablesModel</code> class.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="200"><strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="200">Name:</strong> This will be set as an id for <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="200">DataTables</em>.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201"><strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201">UrlRead:</strong> this is the URL from where <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201">DataTables</em> is going to fetch data to render in the table. Here we are setting the URL to <strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201"><code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201">GetCustomersCountByCountry</code></strong> Action of the <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201">TutorialCustomersByCountry</code> controller from where we are getting data for <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="201">DataTables</em>.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="202"><strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="202">Paging:</strong> This property is used to enable or disable pagination for DataTables.</li>
<li sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="203"><strong sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="203">ColumnCollection:</strong> This property holds the column configuration property.</li>
</ul>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="205">There are several other properties that you can play around with to understand what each of the properties is used for.</p>
<h2 id="infrastructurerouteprovider" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="207">#Infrastructure/RouteProvider</h2>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="209">Now the last step is to register our route for the Action &quot;GetCustomersCountByCountry&quot; from Controller &quot;TutorialCustomersByCountry&quot;. We do not need to register the route for &quot;Configure&quot; Action because we have already registered that in the <code sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="209">DistOfCustByCountryPlugin</code> class.</p>
<pre><code class="lang-cs" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="211">/// &lt;summary&gt;
/// Represents plugin route provider
/// &lt;/summary&gt;
public class RouteProvider : IRouteProvider
{
    /// &lt;summary&gt;
    /// Register routes
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;endpointRouteBuilder&quot;&gt;Route builder&lt;/param&gt;
    public void RegisterRoutes(IEndpointRouteBuilder endpointRouteBuilder)
    {
        //add route for the access token callback
        endpointRouteBuilder.MapControllerRoute(&quot;CustomersDistributionByCountry&quot;, &quot;Plugins/Tutorial/CustomerDistByCountry/&quot;,
            new { controller = &quot;TutorialCustomersByCountry&quot;, action = &quot;GetCustomersCountByCountry&quot; });
    }

    /// &lt;summary&gt;
    /// Gets a priority of route provider
    /// &lt;/summary&gt;
    public int Priority =&gt; 0;
}
</code></pre>
<div class="NOTE" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="235">
<h5>Note</h5>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="236">To learn more about nopCommerce routing please visit <a class="xref" href="register-new-routes.html" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="236">this page</a></p>
</div>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="238">Now just build your project and run it. Log in as Admin user and go to the <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="238">LocalPlugins</em> menu under <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="238">Configuration</em>, there you will see your newly created plugin. Install that plugin. After installation is complete you will see a <em sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="238">configuration</em> button in your plugin. If you have followed correctly through this tutorial then you will see output something like:</p>
<p sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="240"><img src="_static/guide-to-creating-a-page-containing-a-reporting-table-of-datatables/image2.png" sourcefile="en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md" sourcestartlinenumber="240" alt="image2"></p>

                  <div class="course-banner">
                      <a target="_blank" href="https://www.nopcommerce.com/training?utm_source=docs_nopcommerce&utm_medium=documentation&utm_campaign=course&utm_content=Developers_Guide">
                          <div class="course-banner-left"></div>
                          <div class="course-banner-center">
                              <div class="course-banner-title"><span>nopCommerce training course</span></div>
                              <div class="course-banner-description"><span>Start developing your skills and become a Certified Developer</span></div>
                          </div>
                          <div class="course-banner-right"></div>
                      </a> 
                  </div>            </article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/nopSolutions/nopCommerce-Docs/blob/master/en/developer/tutorials/guide-to-creating-a-page-containing-a-reporting-table-of-datatables.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>

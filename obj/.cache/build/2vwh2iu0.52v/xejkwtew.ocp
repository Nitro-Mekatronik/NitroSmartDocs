<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Coding Standards </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Coding Standards ">
    <meta name="generator" content="docfx 2.59.4.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <link rel="preload" href="../../../fonts/fonts.css" )"="" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <meta property="docfx:navrel" content="/">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    <meta property="docfx:rel" content="../../../">
    
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-7490022-8"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-7490022-8');
    </script>
    <script>
      /*! loadCSS. [c]2017 Filament Group, Inc. MIT License
      - testing support for link[rel=preload]
      - enabling async CSS loading in browsers that do not support rel=preload
      - applying rel preload css once loaded, whether supported or not.
      */
      !function(n){"use strict";n.loadCSS||(n.loadCSS=function(){});var o=loadCSS.relpreload={};if(o.support=function(){var e;try{e=n.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),o.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.addEventListener?t.removeEventListener("load",a):t.attachEvent&&t.detachEvent("onload",a),t.setAttribute("onload",null),t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},o.poly=function(){if(!o.support())for(var t=n.document.getElementsByTagName("link"),e=0;e<t.length;e++){var a=t[e];"preload"!==a.rel||"style"!==a.getAttribute("as")||a.getAttribute("data-loadcss")||(a.setAttribute("data-loadcss",!0),o.bindMediaToggle(a))}},!o.support()){o.poly();var t=n.setInterval(o.poly,500);n.addEventListener?n.addEventListener("load",function(){o.poly(),n.clearInterval(t)}):n.attachEvent&&n.attachEvent("onload",function(){o.poly(),n.clearInterval(t)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:n.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
    </script>
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="170">
    <div id="wrapper">
      <header>
        <div class="container">
          <div id="header" class="header navbar-header">
            <div class="header-logo">
              <a href="https://www.nopcommerce.com/">
                <img id="logo" class="svg" src="../../../logo.png" alt="">
              </a>
            </div>  </div>
          <div class="navbar-collapse collapse in">
            <form class="navbar-form navbar-right" role="search" id="search">
              <div class="form-group">
                <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
              </div>
        
              <div class="form-group lang-container">
                    
                    <select id="lang-switcher" class="select-css">
                        <option value="/en/index.html" selected="">
                          English
                        
                    </select>        </div>
            </form>
          </div>
        </div>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list">Search Results for <span></span></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="en/developer/tutorials/coding-standards">
<h1 id="coding-standards" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="8">Coding Standards</h1>

<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="10">There are three supported .NET coding convention categories:</p>
<h2 id="language-conventions" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="12">Language conventions</h2>
<h3 id="net-code-style-settings" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="14">.NET code style settings</h3>
<h4 id="this-qualifiers" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="16">&quot;this.&quot; qualifiers</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="18">This style rule can be applied to fields, properties, methods, or events.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="20">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="20"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="20">Prefer the code element <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="20">not</em> to be prefaced with <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="20">this.</code></p>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="21"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="21">Prefer fields <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="21">not</em> to be prefaced with <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="21">this.</code></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="23">//Right
capacity = 0;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="28">//Wrong
this.capacity = 0;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="33"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="33">Prefer properties <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="33">not</em> to be prefaced with <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="33">this.</code></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="35">//Right
ID = 0;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="40">//Wrong
this.ID = 0;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="45"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="45">Prefer methods <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="45">not</em> to be prefaced with <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="45">this.</code></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="47">//Right
Display();
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="52">//Wrong
this.Display();
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="57"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="57">Prefer events <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="57">not</em> to be prefaced with <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="57">this.</code></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="59">//Right
Elapsed += Handler;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="64">//Wrong
this.Elapsed += Handler;
</code></pre>
</li>
</ul>
<h4 id="language-keywords-instead-of-framework-type-names-for-type-references" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="69">Language keywords instead of framework type names for type references</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="71">This style rule can be applied to local variables, method parameters, and class members, or as a separate rule to type member access expressions.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="73">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="73"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="73">Prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="75">//Right
private int _member;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="80">//Wrong
private Int32 _member;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="85"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="85">Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="87">//Right
var local = int.MaxValue;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="92">//Wrong
var local = Int32.MaxValue;
</code></pre>
</li>
</ul>
<h4 id="modifier-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="97">Modifier preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="99">The style rules in this section concern modifier preferences, including requiring accessibility modifiers, specifying the desired modifier sort order, and requiring the read-only modifier.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="101">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="101"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="101">Prefer accessibility modifiers to be declared except for public interface members.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="103">//Right
class MyClass
{
    private const string thisFieldIsConst = &quot;constant&quot;;
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="111">//Wrong
class MyClass
{
    const string thisFieldIsConst = &quot;constant&quot;;
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="119"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="119">Prefer the specified ordering:</p>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="121"><em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="121"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="121">public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:silent</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="123">//Right
class MyClass
{
    private static readonly int _daysInYear = 365;
}
</code></pre>
</li>
</ul>
<h4 id="parentheses-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="131">Parentheses preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="133">The style rules in this section concern parentheses preferences, including the use of parentheses for arithmetic, relational, and other binary operators.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="135">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="135"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="135">Prefer parentheses to clarify arithmetic operator (*, /, %, +, -, &lt;&lt;, &gt;&gt;, &amp;, ^, |) precedence</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="137">//Right
var v = a + (b * c);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="142">//Wrong
var v = a + b * c;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="147"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="147">Prefer parentheses to clarify relational operator (&gt;, &lt;, &lt;=, &gt;=, is, as, ==, !=) precedence</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="149">//Right
var v = (a &lt; b) == (c &gt; d);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="154">//Wrong
var v = a &lt; b == c &gt; d;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="159"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="159">Prefer parentheses to clarify other binary operators (&amp;&amp;, ||, ??) precedence</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="161">//Right
var v = a || (b &amp;&amp; c);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="166">//Wrong
var v = a || b &amp;&amp; c;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="171"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="171">Prefer to not have parentheses when operator precedence is obvious</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="173">//Right
var v = a.b.Length;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="178">//Wrong
var v = (a.b).Length;
</code></pre>
</li>
</ul>
<h4 id="expression-level-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="183">Expression-level preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="185">The style rules in this section concern expression-level preferences, including the use of object initializers, collection initializers, explicit or inferred tuple names, and inferred anonymous types.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="187">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="187"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="187">Prefer objects to be initialized using object initializers when possible</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="189">//Right
var c = new Customer() { Age = 21 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="194">//Wrong
var c = new Customer();
c.Age = 21;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="200"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="200">Prefer collections to be initialized using collection initializers when possible</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="202">//Right
var list = new List&lt;int&gt; { 1, 2, 3 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="207">//Wrong
var list = new List&lt;int&gt;();
list.Add(1);
list.Add(2);
list.Add(3);
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="215"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="215">Prefer tuple names to ItemX properties</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="217">//Right
(string name, int age) customer = GetCustomer();
var name = customer.name;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="223">//Wrong
(string name, int age) customer = GetCustomer();
var name = customer.Item1;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="229"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="229">Prefer inferred tuple element names</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="231">//Right
var tuple = (age, name);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="236">//Wrong
var tuple = (age: age, name: name);
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="241"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="241">Prefer explicit anonymous type member names</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="243">//Right
var anon = new { age = age, name = name };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="248">//Wrong
var anon = new { age, name };
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="253"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="253">Prefer auto-properties over properties with private backing fields</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="255">//Right
private int Age { get; }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="260">//Wrong
private int age;

public int Age
{
    get
    {
        return age;
    }
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="273"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="273">Prefer using a null check with pattern-matching over <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="273"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="273">object.ReferenceEquals</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="275">//Right
if (value is null)
    return;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="281">//Wrong
if (object.ReferenceEquals(value, null))
    return;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="287"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="287">Prefer assignments with a ternary conditional over an if-else statement</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="289">//Right
string s = expr ? &quot;hello&quot; : &quot;world&quot;;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="294">//Wrong
string s;
if (expr)
{
    s = &quot;hello&quot;;
}
else
{
    s = &quot;world&quot;;
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="307"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="307">Prefer return statements to use a ternary conditional over an if-else statement</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="309">//Right
return expr ? &quot;hello&quot; : &quot;world&quot;;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="314">//Wrong
if (expr)
{
    return &quot;hello&quot;;
}
else
{
    return &quot;world&quot;;
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="326"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="326">Prefer compound assignment expressions</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="328">//Right
x += 1;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="333">//Wrong
x = x + 1;
</code></pre>
</li>
</ul>
<h4 id="null-checking-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="338">Null-checking preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="340">The style rules in this section concern null-checking preferences.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="342">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="342"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="342">Prefer null coalescing expressions to ternary operator checking</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="344">//Right
var v = x ?? y;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="349">//Wrong
var v = x != null ? x : y; // or
var v = x == null ? y : x;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="355"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="355">Prefer to use a null-conditional operator when possible</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="357">//Right
var v = o?.ToString();
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="362">//Wrong
var v = o == null ? null : o.ToString(); // or
var v = o != null ? o.String() : null;
</code></pre>
</li>
</ul>
<h3 id="c-code-style-settings" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="368">C# code style settings</h3>
<h4 id="implicit-and-explicit-types" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="370">Implicit and explicit types</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="372">The style rules in this section concern the use of the var keyword versus an explicit type in a variable declaration. This rule can be applied separately to built-in types, when the type is apparent, and elsewhere.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374">Prefer <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374">var</code></em> is used to declare variables with built-in system types such as <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="374">int</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="376">//Right
var x = 5;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="381">//Wrong
int x = 5;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="386"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="386">Prefer <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="386"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="386">var</code></em> when the type is already mentioned on the right-hand side of a declaration expression</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="388">//Right
var obj = new Customer();
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="393">//Wrong
Customer obj = new Customer();
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="398"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="398">Prefer <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="398"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="398">var</code></em> over explicit type in all cases, unless overridden by another code style rule</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="400">//Right
var f = this.Init();
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="405">//Wrong
bool f = this.Init();
</code></pre>
</li>
</ul>
<h4 id="expression-bodied-members" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="410">Expression-bodied members</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="412">The style rules in this section concern the use of <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="412">expression-bodied members</a> when the logic consists of a single expression. This rule can be applied to methods, constructors, operators, properties, indexers, and accessors.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="414">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="414"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="414">Prefer block bodies for methods</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="416">//Right
public int GetAge() { return this.Age; }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="421">//Wrong
public int GetAge() =&gt; this.Age;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="426"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="426">Prefer block bodies for constructors</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="428">//Right
public Customer(int age) { Age = age; }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="433">//Wrong
public Customer(int age) =&gt; Age = age;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="438"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="438">Prefer block bodies for operators</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="440">//Right
public static ComplexNumber operator + (ComplexNumber c1, ComplexNumber c2)
{ return new ComplexNumber(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary); }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="446">//Wrong
public static ComplexNumber operator + (ComplexNumber c1, ComplexNumber c2)
    =&gt; new ComplexNumber(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary);
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="452"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="452">Prefer expression bodies for properties when they will be a single line</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="454">//Right
public int Age =&gt; _age;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="459">//Wrong
public int Age { get { return _age; }}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="464"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="464">Prefer expression bodies for indexers</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="466">//Right
public T this[int i] =&gt; _values[i];
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="471">//Wrong
public T this[int i] { get { return _values[i]; } }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="476"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="476">Prefer expression bodies for accessors</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="478">//Right
public int Age { get =&gt; _age; set =&gt; _age = value; }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="483">//Wrong
public int Age { get { return _age; } set { _age = value; } }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="488"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="488">Prefer expression bodies for lambdas</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="490">//Right
Func&lt;int, int&gt; square = x =&gt; x * x;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="495">//Wrong
Func&lt;int, int&gt; square = x =&gt; { return x * x; };
</code></pre>
</li>
</ul>
<h4 id="pattern-matching" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="500">Pattern matching</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="502">The style rules in this section concern the use of <a href="https://docs.microsoft.com/dotnet/csharp/pattern-matching" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="502">pattern matching</a> in C#.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="504">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="504"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="504">Prefer pattern matching instead of is expressions with type casts</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="506">//Right
if (o is int i) {...}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="511">//Wrong
if (o is int) {var i = (int)o; ... }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="516"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="516">Prefer pattern matching instead of <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="516"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="516">as</code></em> expressions with null checks to determine if something is of a particular type</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="518">//Right
if (o is string s) {...}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="523">//Wrong
var s = o as string;
if (s != null) {...}
</code></pre>
</li>
</ul>
<h4 id="inlined-variable-declarations" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="529">Inlined variable declarations</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="531">This style rule concerns whether out variables are declared inline or not. Starting in C# 7, you can <a href="https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/out-parameter-modifier#calling-a-method-with-an-out-argument" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="531">declare an out variable in the argument list of a method call</a>, rather than in a separate variable declaration.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="533">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="533"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="533">Prefer <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="533"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="533">out</code></em> variables to be declared inline in the argument list of a method call when possible</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="535">//Right
if (int.TryParse(value, out int i)) {...}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="540">//Wrong
int i;
if (int.TryParse(value, out i)) {...}
</code></pre>
</li>
</ul>
<h4 id="c-expression-level-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="546">C# expression-level preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="548">This style rule concerns using the <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/statements-expressions-operators/default-value-expressions#default-literal-and-type-inference" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="548">default literal for default value expressions</a> when the compiler can infer the type of the expression.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550">Prefer <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550">default</code></em> over <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="550">default(T)</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="552">//Right
void DoWork(CancellationToken cancellationToken = default) { ... }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="557">//Wrong
void DoWork(CancellationToken cancellationToken = default(CancellationToken)) {   ... }
</code></pre>
</li>
</ul>
<h4 id="c-null-checking-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="562">C# null-checking preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="564">These style rules concern the syntax around null checking, including using throw expressions or throw statements, and whether to perform a null check or use the conditional coalescing operator (?.) when invoking a <a href="https://docs.microsoft.com/dotnet/csharp/lambda-expressions" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="564">lambda expression</a>.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="566">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="566"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="566">Prefer to use throw expressions instead of throw statements</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="568">//Right
this.s = s ?? throw new ArgumentNullException(nameof(s));
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="573">//Wrong
if (s == null) { throw new ArgumentNullException(nameof(s)); }
this.s = s;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="579"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="579">Prefer to use the conditional coalescing operator (?.) when invoking a lambda expression, instead of performing a null check</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="581">//Right
func?.Invoke(args);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="586">//Wrong
if (func != null) { func(args); }
</code></pre>
</li>
</ul>
<h4 id="code-block-preferences" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="591">Code block preferences</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="593">This style rule concerns the use of curly braces { } to surround code blocks.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="595">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="595"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="595">Prefer no curly braces if allowed</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="597">//Right
if (test) this.Display();
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="602">//Wrong
if (test) { this.Display(); }
</code></pre>
</li>
</ul>
<h2 id="formatting-conventions" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="607">Formatting conventions</h2>
<h3 id="net-formatting-settings" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="609">.NET formatting settings</h3>
<h3 id="organize-using-directives" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="611">Organize using directives</h3>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="613">These formatting rules concern the sorting and display of <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="613"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="613">using</code></em> directives and <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="613"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="613">Imports</code></em> statements.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615">Sort <code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615">System.*</code> <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="615">using</code></em> directives alphabetically, and place them before other using directives.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="617">//Right
using System.Collections.Generic;
using System.Threading.Tasks;
using Octokit;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="624">//Wrong
using System.Collections.Generic;
using Octokit;
using System.Threading.Tasks;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="631"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="631">Do not place a blank line between using directive groups.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="633">//Right
using System.Collections.Generic;
using System.Threading.Tasks;
using Octokit;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="640">//Wrong
using System.Collections.Generic;
using System.Threading.Tasks;

using Octokit;
</code></pre>
</li>
</ul>
<h3 id="c-formatting-settings" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="648">C# formatting settings</h3>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="650">The formatting rules in this section apply only to C# code.</p>
<h4 id="new-line-options" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="652">New-line options</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="654">These formatting rules concern the use of new lines to format code.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="656">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="656"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="656">Require braces to be on a new line for all expressions (&quot;Allman&quot; style).</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="658">//Right
void MyMethod()
{
    if (...)
    {
        ...
    }
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="669">//Wrong
void MyMethod() {
    if (...) {
        ...
    }
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="678"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="678">Place else statements on a new line.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="680">//Right
if (...) 
{
    ...
}
else 
{
    ...
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="692">//Wrong
if (...) {
    ...
} else {
    ...
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="701"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="701">Place catch statements on a new line.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="703">//Right
try 
{
    ...
}
catch (Exception e) 
{
    ...
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="715">//Wrong
try {
    ...
} catch (Exception e) {
    ...
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="724"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="724">Require finally statements to be on a new line after the closing brace.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="726">//Right
try 
{
    ...
}
catch (Exception e) 
{
    ...
}
finally 
{
    ...
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="742">//Wrong
try {
    ...
} catch (Exception e) {
    ...
} finally {
    ...
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="753"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="753">Require members of object initializers to be on separate lines</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="755">//Right
var z = new B()
{
    A = 3,
    B = 4
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="764">//Wrong
var z = new B()
{
    A = 3, B = 4
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="772"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="772">Require members of anonymous types to be on separate lines</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="774">//Right
var z = new
{
    A = 3,
    B = 4
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="783">//Wrong
var z = new
{
    A = 3, B = 4
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="791"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="791">Require elements of query expression clauses to be on separate lines</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="793">//Right
var q = from a in e
        from b in e
        select a * b;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="800">//Wrong
var q = from a in e from b in e
        select a * b;
</code></pre>
</li>
</ul>
<h4 id="indentation-options" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="806">Indentation options</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="808">These formatting rules concern the use of indentation to format code.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="810">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="810"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="810">Indent <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="810"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="810">switch</code></em> case contents</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="812">//Right
switch(c) 
{
    case Color.Red:
        Console.WriteLine(&quot;The color is red&quot;);
        break;
    case Color.Blue:
        Console.WriteLine(&quot;The color is blue&quot;);
        break;
    default:
        Console.WriteLine(&quot;The color is unknown.&quot;);
        break;
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="828">//Wrong
switch(c) {
    case Color.Red:
    Console.WriteLine(&quot;The color is red&quot;);
    break;
    case Color.Blue:
    Console.WriteLine(&quot;The color is blue&quot;);
    break;
    default:
    Console.WriteLine(&quot;The color is unknown.&quot;);
    break;
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="843"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="843">Indent <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="843"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="843">switch</code></em> labels</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="845">//Right
switch(c) 
{
    case Color.Red:
        Console.WriteLine(&quot;The color is red&quot;);
        break;
    case Color.Blue:
        Console.WriteLine(&quot;The color is blue&quot;);
        break;
    default:
        Console.WriteLine(&quot;The color is unknown.&quot;);
        break;
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="861">//Wrong
switch(c) {
case Color.Red:
    Console.WriteLine(&quot;The color is red&quot;);
    break;
case Color.Blue:
    Console.WriteLine(&quot;The color is blue&quot;);
    break;
default:
    Console.WriteLine(&quot;The color is unknown.&quot;);
    break;
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="876"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="876">Labels are placed at the same indent as the current context</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="878">//Right
class C
{
    private string MyMethod(...)
    {          
        if (...) 
        {
            goto error;
        }
        error:
        throw new Exception(...);
    }
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="894">//Wrong
class C
{
    private string MyMethod(...)
    {
        if (...) {
            goto error;
        }
error:
        throw new Exception(...);
    }
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="909">//Wrong
class C
{
    private string MyMethod(...)
    {
        if (...) {
            goto error;
        }
    error:
        throw new Exception(...);
    }
}
</code></pre>
</li>
</ul>
<h4 id="spacing-options" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="924">Spacing options</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="926">These formatting rules concern the use of space characters to format code.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="928">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="928"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="928">Remove space between the cast and the value</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="930">//Right
int y = (int)x;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="935">//Wrong
int y = (int) x;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="940"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="940">Place a space character after a keyword in a control flow statement such as a   <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="940"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="940">for</code></em> loop</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="942">//Right
for (int i;i&lt;x;i++) { ... }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="947">//Wrong
for(int i;i&lt;x;i++) { ... }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="952"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="952">Place a space character before the colon for bases or interfaces in a type   declaration</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="954">//Right
interface I
{

}

class C : I
{

}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="967">//Wrong
interface I
{

}

class C: I
{

}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="980"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="980">Place a space character after the colon for bases or interfaces in a type   declaration</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="982">//Right
interface I
{

}

class C : I
{

}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="995">//Wrong
interface I
{

}

class C :I
{

}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1008"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1008">Insert space before and after the binary operator</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1010">//Right
return x * (x - y);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1015">//Wrong
return x*(x-y);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1020">//Wrong
return x  *  (x-y);
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1025"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1025">Remove space characters after the opening parenthesis and before the closing   parenthesis of a method declaration parameter list</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1027">//Right
void Bark(int x) { ... }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1032">//Wrong
void Bark( int x ) { ... }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1037"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1037">Remove space within empty parameter list parentheses for a method declaration</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1039">//Right
void Goo()
{
    Goo(1);
}

void Goo(int x)
{
    Goo();
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1052">//Wrong
void Goo( )
{
    Goo(1);
}

void Goo(int x)
{
    Goo();
}

</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1066"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1066">Remove space characters between the method name and opening parenthesis in the   method declaration</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1068">//Right
void M() { }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1073">//Wrong
void M () { }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1078"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1078">Remove space characters after the opening parenthesis and before the closing   parenthesis of a method call</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1080">//Right
MyMethod(argument);
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1085">//Wrong
MyMethod( argument );
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1090"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1090">Remove space within empty argument list parentheses</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1092">//Right
void Goo()
{
    Goo(1);
}

void Goo(int x)
{
    Goo();
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1105">//Wrong
void Goo()
{
    Goo(1);
}

void Goo(int x)
{
    Goo( );
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1118"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1118">Remove space between method call name and opening parenthesis</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1120">//Right
void Goo()
{
    Goo(1);
}

void Goo(int x)
{
    Goo();
}
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1133">//Wrong
void Goo()
{
    Goo(1);
}

void Goo(int x)
{
    Goo ();
}
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1146"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1146">Insert space after a comma</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1148">//Right
int[] x = new int[] { 1, 2, 3, 4, 5 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1153">//Wrong
int[] x = new int[] { 1,2,3,4,5 };
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1158"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1158">Remove space before a comma</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1160">//Right
int[] x = new int[] { 1, 2, 3, 4, 5 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1165">//Wrong
int[] x = new int[] { 1 , 2 , 3 , 4 , 5 };
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1170"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1170">Insert space after each semicolon in a for statement</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1172">//Right
for (int i = 0; i &lt; x.Length; i++)
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1177">//Wrong
for (int i = 0;i &lt; x.Length;i++)
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1182"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1182">Remove space before each semicolon in a for statement</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1184">//Right
for (int i = 0; i &lt; x.Length; i++)
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1189">//Wrong
for (int i = 0 ; i &lt; x.Length ; i++)
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1194"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1194">Remove extra space characters in declaration statements</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1196">//Right
int x = 0;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1201">//Wrong
int    x    =    0   ;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1206"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1206">Remove space before opening square brackets <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1206"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1206">[</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1208">//Right
int[] numbers = new int[] { 1, 2, 3, 4, 5 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1213">//Wrong
int [] numbers = new int [] { 1, 2, 3, 4, 5 };
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1218"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1218">Remove space between empty square brackets <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1218"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1218">[]</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1220">//Right
int[] numbers = new int[] { 1, 2, 3, 4, 5 };
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1225">//Wrong
int[ ] numbers = new int[ ] { 1, 2, 3, 4, 5 };
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1230"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1230">Remove space characters in non-empty square brackets <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1230"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1230">[0]</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1232">//Right
int index = numbers[0];
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1237">//Wrong
int index = numbers[ 0 ];
</code></pre>
</li>
</ul>
<h4 id="wrap-options" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1242">Wrap options</h4>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1244">These formatting rules concern the use of single lines versus separate lines for statements and code blocks.</p>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1246">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1246"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1246">Leave statements and member declarations on different lines</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1248">//Right
int i = 0;
string name = &quot;John&quot;;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1254">//Wrong
int i = 0; string name = &quot;John&quot;;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1259"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1259">Leave code block on a single line</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1261">//Right
public int Foo { get; set; }
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1266">//Wrong
public int MyProperty
{
    get; set;
}
</code></pre>
</li>
</ul>
<h2 id="naming-conventions" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1274">Naming conventions</h2>
<ul sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1276">
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1276"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1276">Constants are named only in capital letters with a delimiter <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1276"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1276">_</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1278">//Right
const int TEST_CONSTANT = 1;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1283">//Wrong
const int Test_Constant = 1;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1288"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1288">Fields with <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1288"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1288">public</code></em> access are referred to as PascalCase notation</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1290">//Right
public int TestField;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1295">//Wrong
public int testField;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1300"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1300">Interface names must be in PascalCase notation and have the prefix <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1300"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1300">I</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1302">//Right
public interface ITestInterface;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1307">//Wrong
public interface testInterface;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1312"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1312">The names of classes, structures, methods, enums, events, properties,   namespaces, and delegates should be in PascalCase notation</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1314">//Right
public class SomeClass;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1319">//Wrong
public class someClass;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1324"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1324">Assigned to the parameter of a generic type a descriptive name in the notation   PascalCase, unless enough of a letter and a descriptive name has no practical   value</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1326">//Right
public interface ISessionChannel&lt;TSession&gt; { /*...*/ }
public delegate TOutput Converter&lt;TInput, TOutput&gt;(TInput from);
public class List&lt;T&gt; { /*...*/ }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1333"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1333">Use the name of the type <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1333"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1333">T</code></em> parameter for types that contain only a single letter type parameter</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1335">//Right
public int IComparer&lt;T&gt;() { return 0; }
public delegate bool Predicate&lt;T&gt;(T item);
public struct Nullable&lt;T&gt; where T : struct { /*...*/ }
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1342"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1342">Use the prefix <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1342"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1342">T</code></em> for descriptive names of type parameters</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1344">//Right
public interface ISessionChannel&lt;TSession&gt;
{
    TSession Session { get; }
}
</code></pre>
<p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1352">Specify the constraints associated with the type parameter in its name. For example, an <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1352"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1352">ISession</code></em> constraint parameter may be called <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1352"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1352">TSession</code></em>.</p>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1354"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1354">Private and protected class fields must begin with the prefix <em sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1354"><code sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1354">_</code></em></p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1356">//Right
private int _testField;
protected int _testField;
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1362">//Wrong
private int testField;
protected int testField;
</code></pre>
</li>
<li sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1368"><p sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1368">All other code elements such as variables, method parameters, and class fields (except open ones) are named in camelCase notation.</p>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1370">//Right
var testVar = new Object();
public void Foo(int firstParam, string secondParam)
</code></pre>
<pre><code class="lang-csharp" sourcefile="en/developer/tutorials/coding-standards.md" sourcestartlinenumber="1376">//Wrong
var TestVar = new Object();
public void Foo(int FirstParam, string SecondParam)
</code></pre>
</li>
</ul>

                  <div class="course-banner">
                      <a target="_blank" href="https://www.nopcommerce.com/training?utm_source=docs_nopcommerce&utm_medium=documentation&utm_campaign=course&utm_content=Developers_Guide">
                          <div class="course-banner-left"></div>
                          <div class="course-banner-center">
                              <div class="course-banner-title"><span>nopCommerce training course</span></div>
                              <div class="course-banner-description"><span>Start developing your skills and become a Certified Developer</span></div>
                          </div>
                          <div class="course-banner-right"></div>
                      </a> 
                  </div>            </article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/nopSolutions/nopCommerce-Docs/blob/master/en/developer/tutorials/coding-standards.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>

<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>How to write a Tax Plugin for nopCommerce 4.20 </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="How to write a Tax Plugin for nopCommerce 4.20 ">
    <meta name="generator" content="docfx 2.59.4.0">
    
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../../../styles/docfx.css">
    <link rel="stylesheet" href="../../../styles/main.css">
    <link rel="preload" href="../../../fonts/fonts.css" )"="" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <meta property="docfx:navrel" content="/">
    <meta property="docfx:tocrel" content="../../toc.html">
    
    <meta property="docfx:rel" content="../../../">
    
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-7490022-8"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-7490022-8');
    </script>
    <script>
      /*! loadCSS. [c]2017 Filament Group, Inc. MIT License
      - testing support for link[rel=preload]
      - enabling async CSS loading in browsers that do not support rel=preload
      - applying rel preload css once loaded, whether supported or not.
      */
      !function(n){"use strict";n.loadCSS||(n.loadCSS=function(){});var o=loadCSS.relpreload={};if(o.support=function(){var e;try{e=n.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),o.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.addEventListener?t.removeEventListener("load",a):t.attachEvent&&t.detachEvent("onload",a),t.setAttribute("onload",null),t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},o.poly=function(){if(!o.support())for(var t=n.document.getElementsByTagName("link"),e=0;e<t.length;e++){var a=t[e];"preload"!==a.rel||"style"!==a.getAttribute("as")||a.getAttribute("data-loadcss")||(a.setAttribute("data-loadcss",!0),o.bindMediaToggle(a))}},!o.support()){o.poly();var t=n.setInterval(o.poly,500);n.addEventListener?n.addEventListener("load",function(){o.poly(),n.clearInterval(t)}):n.attachEvent&&n.attachEvent("onload",function(){o.poly(),n.clearInterval(t)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:n.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
    </script>
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="170">
    <div id="wrapper">
      <header>
        <div class="container">
          <div id="header" class="header navbar-header">
            <div class="header-logo">
              <a href="https://www.nopcommerce.com/">
                <img id="logo" class="svg" src="../../../logo.png" alt="">
              </a>
            </div>  </div>
          <div class="navbar-collapse collapse in">
            <form class="navbar-form navbar-right" role="search" id="search">
              <div class="form-group">
                <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
              </div>
        
              <div class="form-group lang-container">
                    
                    <select id="lang-switcher" class="select-css">
                        <option value="/en/index.html" selected="">
                          English
                        
                    </select>        </div>
            </form>
          </div>
        </div>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div class="container body-content">
        
        <div id="search-results">
          <div class="search-list">Search Results for <span></span></div>
          <div class="sr-items">
            <p><i class="glyphicon glyphicon-refresh index-loading"></i></p>
          </div>
          <ul id="pagination" data-first="First" data-prev="Previous" data-next="Next" data-last="Last"></ul>
        </div>
      </div>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="en/developer/plugins/how-to-write-tax-plugin-4.20">
<h1 id="how-to-write-a-tax-plugin-for-nopcommerce" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="8">How to write a Tax Plugin for nopCommerce</h1>

<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="10">To extend nopCommerce functionality, plugins are used. There are various types of plugins like &quot;PickupInStore&quot; and &quot;PayPal Standard&quot; which are already contained in the nopCommerce distro. You can also search various plugins on the <a href="https://www.nopcommerce.com/marketplace" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="10">nopCommerce official site</a> to see if someone has already created a plugin that suits your needs. If you haven't found one, then you are at the right place because this article will guide you through the process of creating a plugin, especially a tax plugin, according to your need.</p>
<h2 id="the-plugin-structure-required-files-and-locations" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="12">The plugin structure, required files, and locations</h2>
<ol sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="14">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="14"><p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="14">Start by creating a new &quot;Class Library&quot; project in the solution. It is recommended to place your plugin in the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="14">Plugins</strong> directory, located in the root folder of the source, where other plugins and widgets already reside.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="16"><img src="_static/how-to-write-a-tax-plugin-4.20/image1.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="16" alt="image1"></p>
<div class="NOTE" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="18">
<h5>Note</h5>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="19">Do not get confused this directory with the one which exists in the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="19">Presentation\Nop.Web</code> directory. The Plugins directory in the Nop.Web directory contains the plugin's compiled files.</p>
</div>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">A recommended name for a plugin project is <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">Nop.Plugin.{Group}.{Name}</code>. <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">{Group}</code> is your plugin group (for example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">Payment</code> or <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">Shipping</code>). <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">{Name}</code> is your plugin name (for example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">FixedOrByCountryStateZip</code>). For example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">FixedOrByCountryStateZip</code> tax plugin has the following name: <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">Nop.Plugin.Tax.FixedOrByCountryStateZip</code>. But please note that it's not a requirement. And you can choose any name for a plugin. For example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="21">MyFirstTaxPlugin</code>. The Plugins directory structure of a solution looks like the following.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="23"><img src="_static/how-to-write-a-tax-plugin-4.20/image2.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="23" alt="image2"></p>
</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="25"><p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="25">Once the plugin project is created, the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="25">.csproj</strong> file content should be updated using any available text editor application. Replace the content with the following one:</p>
<pre><code class="lang-xml" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="27">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
        &lt;Copyright&gt;SOME_COPYRIGHT&lt;/Copyright&gt;
        &lt;Company&gt;YOUR_COMPANY&lt;/Company&gt;
        &lt;Authors&gt;SOME_AUTHORS&lt;/Authors&gt;
        &lt;PackageLicenseUrl&gt;PACKAGE_LICENSE_URL&lt;/PackageLicenseUrl&gt;
        &lt;PackageProjectUrl&gt;PACKAGE_PROJECT_URL&lt;/PackageProjectUrl&gt;
        &lt;RepositoryUrl&gt;REPOSITORY_URL&lt;/RepositoryUrl&gt;
        &lt;RepositoryType&gt;Git&lt;/RepositoryType&gt;
        &lt;OutputPath&gt;..\..\Presentation\Nop.Web\Plugins\PLUGIN_OUTPUT_DIRECTORY&lt;/OutputPath&gt;
        &lt;OutDir&gt;$(OutputPath)&lt;/OutDir&gt;
        &lt;!--Set this parameter to true to get the dlls copied from the NuGet cache to the output of your        project. You need to set this parameter to true if your plugin has a nuget package to ensure that       the dlls copied from the NuGet cache to the output of your project--&gt;
        &lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt;
    &lt;/PropertyGroup&gt;
    &lt;ItemGroup&gt;
        &lt;ProjectReference Include=&quot;..\..\Presentation\Nop.Web.Framework\Nop.Web.Framework.csproj&quot; /&gt;
        &lt;ClearPluginAssemblies Include=&quot;$(MSBuildProjectDirectory)\..\..\Build\ClearPluginAssemblies.sproj&quot; /&gt;
    &lt;/ItemGroup&gt;
    &lt;!-- This target execute after &quot;Build&quot; target --&gt;
    &lt;Target Name=&quot;NopTarget&quot; AfterTargets=&quot;Build&quot;&gt;
        &lt;!-- Delete unnecessary libraries from plugins path --&gt;
        &lt;MSBuild Projects=&quot;@(ClearPluginAssemblies)&quot; Properties=&quot;PluginPath=$(MSBuildProjectDirectory)\ $    (OutDir)&quot; Targets=&quot;NopClear&quot; /&gt;
    &lt;/Target&gt;
&lt;/Project&gt;
</code></pre>
<div class="NOTE" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="55">
<h5>Note</h5>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="56">The <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="56">PLUGIN_OUTPUT_DIRECTORY</strong> should be replace by the plugin name, for example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="56">Tax.FixedOrByCountryStateZip</code>.</p>
</div>
</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58"><p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58">After updating the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58">.csproj</strong> file, the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58">plugin.json</code> file should be added which is required for the plugin.  This file contains meta-information describing your plugin. Just copy this file from any other existing plugin/widget and modify it for your needs. For information about the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58">plugin.json</code> file, please see <a class="xref" href="plugin.json.html" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="58">plugin.json file</a>.</p>
</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60"><p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">The last required step is to create a class that implements <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">BasePlugin</code> (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">Nop.Core.Plugins</code> namespace) and <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">ITaxProvider</code> interface (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">Nop.Services.Tax</code> namespace). <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">ITaxProvider</strong> implements the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">GetTaxRate</code> method which returns type <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">CalculateTaxResult</strong> (contains tax rate, errors if any, and <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="60">Boolean</code> success status) based on the custom logic, usually based on the customer address.</p>
</li>
</ol>
<h2 id="handling-requests-controllers-models-and-views" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="62">Handling requests. Controllers, models, and views</h2>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="64">Now you can see the plugin by going to <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="64">Admin area</strong> → <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="64">Configuration</strong> → <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="64">Local Plugins</strong>.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="66"><img src="_static/how-to-write-a-tax-plugin-4.20/image4.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="66" alt="image4"></p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="68">When a plugin/widget is installed, you will see the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="68">Uninstall</strong> button. It is a good practice that you uninstall plugins/widgets which are not necessary for performance improvement.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="70"><img src="_static/how-to-write-a-tax-plugin-4.20/image5.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="70" alt="image5"></p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="72">There will be the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="72">Install</strong> and <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="72">Delete</strong> buttons when a plugin/widget is not installed or uninstalled.</p>
<div class="NOTE" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="74">
<h5>Note</h5>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="75">Deleting will remove physical files from the server.</p>
</div>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="77">But as you guessed our plugin does nothing. It does not even have a user interface for its configuration. Let's create a page to configure the plugin.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="79">What we need to do now is create a controller, a model, a view, and a view component.</p>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="81">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="81">MVC controllers are responsible for responding to requests made against an <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="81">ASP.NET MVC</code> website. Each browser request is mapped to a particular controller.</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="82">A view contains the HTML markup and content that is sent to the browser. A view is the equivalent of a page when working with an <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="82">ASP.NET MVC</code> application.</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="83">A view component that implements <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="83">NopViewComponent</strong> which contains logic and codes to render a view.</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="84">An MVC model contains all of your application logic that is not contained in a view or a controller.</li>
</ul>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="86">So let's start:</p>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="88">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="88"><strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="88">Create the model</strong>. Add a <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="88">Models</code> folder in the new plugin, and then add a new model class that fits your need.</li>
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89"><strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Create the view</strong>. Add a <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Views</code> folder in the new plugin, and then add a <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">.cshtml</code> file named <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Configure.cshtml</code>. Set <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Build Action</strong> property of the view file is set to <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Content</strong>, and the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Copy to Output Directory</strong> property is set to <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">Copy always</strong>. Note that the configuration page should use the <em sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="89">_ConfigurePlugin</em> layout.</li>
</ul>
<pre><code class="lang-html" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="91">@model Nop.Plugin.Tax.FixedOrByCountryStateZip.Models.ConfigurationModel

@{
    Layout = &quot;_ConfigurePlugin&quot;;
}

&lt;div class=&quot;form-group&quot;&gt;
    &lt;div class=&quot;col-md-12&quot;&gt;
        &lt;div class=&quot;onoffswitch&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;onoffswitch&quot; class=&quot;onoffswitch-checkbox&quot; id=&quot;advanced-settings-mode&quot; checked=&quot;@Model.CountryStateZipEnabled&quot;&gt;
            &lt;label class=&quot;onoffswitch-label&quot; for=&quot;advanced-settings-mode&quot;&gt;
                &lt;span class=&quot;onoffswitch-inner&quot;
                      data-locale-basic=&quot;@T(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fixed&quot;)&quot;
                      data-locale-advanced=&quot;@T(&quot;Plugins.Tax.FixedOrByCountryStateZip.TaxByCountryStateZip&quot;)&quot;&gt;&lt;/span&gt;
                &lt;span class=&quot;onoffswitch-switch&quot;&gt;&lt;/span&gt;
            &lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    function checkAdvancedSettingsMode(advanced) {
        if (advanced) {
            $(&quot;body&quot;).addClass(&quot;advanced-settings-mode&quot;);
            $(&quot;body&quot;).removeClass(&quot;basic-settings-mode&quot;);
        } else {
            $(&quot;body&quot;).removeClass(&quot;advanced-settings-mode&quot;);
            $(&quot;body&quot;).addClass(&quot;basic-settings-mode&quot;);
        }
    }
    checkAdvancedSettingsMode($(&quot;#advanced-settings-mode&quot;).is(':checked'));
    $(document).ready(function() {
        $(&quot;#advanced-settings-mode&quot;).click(function() {
            checkAdvancedSettingsMode($(this).is(':checked'));
            $.ajax({
                cache: false,
                url: &quot;@Url.Action(&quot;SaveMode&quot;, &quot;FixedOrByCountryStateZip&quot;)&quot;,
                type: &quot;POST&quot;,
                data: {
                    value: $(this).is(':checked')
                },
                dataType: &quot;json&quot;,
                error: function (jqXHR, textStatus, errorThrown) {
                    $(&quot;#saveModeAlert&quot;).click();
                }
            });
            ensureDataTablesRendered();
        });
    });
&lt;/script&gt;
&lt;nop-alert asp-alert-id=&quot;saveModeAlert&quot; asp-alert-message=&quot;@T(&quot;Admin.Common.Alert.Save.Error&quot;)&quot; /&gt;

@await Html.PartialAsync(&quot;~/Plugins/Tax.FixedOrByCountryStateZip/Views/_FixedRate.cshtml&quot;)
@await Html.PartialAsync(&quot;~/Plugins/Tax.FixedOrByCountryStateZip/Views/_CountryStateZip.cshtml&quot;, Model)
</code></pre>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="147">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="147">Also make sure that you have <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="147">_ViewImports.cshtml</strong> file into your <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="147">Views</code> directory. You can just copy it from any other existing plugin or widget.</li>
</ul>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="149"><img src="_static/how-to-write-a-tax-plugin-4.20/image6.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="149" alt="image6"></p>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151"><strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">Create the controller</strong>. Add a <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">Controllers</code> folder in the new plugin, and then add a new controller class. A good practice is to name plugin controllers <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">{Group}{Name}Controller.cs</strong>. For example, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">FixedOrByCountryStateZipController</code>. Of course, it's not a requirement to name controllers this way (but just a recommendation). Then create an appropriate action method for the configuration page (in the admin area). Let's name it <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">Configure</code>. Prepare a model class and pass it to the following view using a physical view path: <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="151">~/Plugins/{PluginOutputDirectory}/Views/Configure.cshtml</strong>.</li>
</ul>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="153">public IActionResult Configure()
{
    if (!_permissionService.Authorize(StandardPermissionProvider.ManageTaxSettings))
        return AccessDeniedView();

    var taxCategories = _taxCategoryService.GetAllTaxCategories();
    if (!taxCategories.Any())
        return Content(&quot;No tax categories can be loaded&quot;);

    var model = new ConfigurationModel { CountryStateZipEnabled = _countryStateZipSettings.CountryStateZipEnabled };
    //stores
    model.AvailableStores.Add(new SelectListItem { Text = &quot;*&quot;, Value = &quot;0&quot; });
    var stores = _storeService.GetAllStores();
    foreach (var s in stores)
        model.AvailableStores.Add(new SelectListItem { Text = s.Name, Value = s.Id.ToString() });
    //tax categories
    foreach (var tc in taxCategories)
        model.AvailableTaxCategories.Add(new SelectListItem { Text = tc.Name, Value = tc.Id.ToString() });
    //countries
    var countries = _countryService.GetAllCountries(showHidden: true);
    foreach (var c in countries)
        model.AvailableCountries.Add(new SelectListItem { Text = c.Name, Value = c.Id.ToString() });
    //states
    model.AvailableStates.Add(new SelectListItem { Text = &quot;*&quot;, Value = &quot;0&quot; });
    var defaultCountry = countries.FirstOrDefault();
    if (defaultCountry != null)
    {
        var states = _stateProvinceService.GetStateProvincesByCountryId(defaultCountry.Id);
        foreach (var s in states)
            model.AvailableStates.Add(new SelectListItem { Text = s.Name, Value = s.Id.ToString() });
    }

    return View(&quot;~/Plugins/Tax.FixedOrByCountryStateZip/Views/Configure.cshtml&quot;, model);
}
</code></pre>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="190">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="190">Use the following attributes for your action method:</li>
</ul>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="192">[AuthorizeAdmin] //confirms access to the admin panel
[Area(AreaNames.Admin)] //specifies the area containing a controller or action
[AdminAntiForgery] //Helps prevent malicious scripts from submitting forged page requests.
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="198">For example, open <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="198">FixedOrByCountryStateZip</code> plugin and look at its implementation of <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="198">FixedOrByCountryStateZipController</code>.
Then for each plugin that has a configuration page, you should specify a configuration URL. Base class named <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="199">BasePlugin</code> has <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="199">GetConfigurationPageUrl</code> method which returns a configuration URL:</p>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="201">public override string GetConfigurationPageUrl()
{
    return $&quot;{_webHelper.GetStoreLocation()}Admin/{CONTROLLER_NAME}/{ACTION_NAME}&quot;;
}
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="208">Where <em sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="208">{CONTROLLER_NAME}</em> is the name of your controller and <em sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="208">{ACTION_NAME}</em> is the name of the action (usually it's <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="208">Configure</code>).</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="210">For assigning different tax rates according to the customer address, a new table is required which records all data related to tax. For this purpose, the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="210">Domain</code> folder is added where we add a class that extends the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="210">BaseEntity</strong> class. In this case <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="210">TaxRate.cs</code></p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="212"><img src="_static/how-to-write-a-tax-plugin-4.20/image7.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="212" alt="image7"></p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="214">Another folder <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="214">Data</code> is also added which consists of Map class(es) and Object Context class(es). Mapping class implements <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="214"><code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="214">NopEntityTypeConfiguration&lt;T&gt;</code></strong> (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="214">Nop.Data.Mapping</code> namespace). Here, the configure method is overridden.</p>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="216">public override void Configure(EntityTypeBuilder&lt;TaxRate&gt; builder)
{
    builder.ToTable(nameof(TaxRate));
    builder.HasKey(rate =&gt; rate.Id);

    builder.Property(rate =&gt; rate.Percentage).HasColumnType(&quot;decimal(18, 4)&quot;);
}
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">Object Context class implements <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">DbContext</strong> class (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">Microsoft.EntityFrameworkCore</code> namespace) and <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">IDbContext</strong> interface (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">Nop.Data</code> namespace). This <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">IDbContext</code> interface consists of methods related to table creation, deletion, and other custom actions like executing a raw SQL query according to the model which was previously added in the <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="226">Domain</code> folder.</p>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="228">public class CountryStateZipObjectContext : DbContext, IDbContext
{
    #region Ctor

    public CountryStateZipObjectContext(DbContextOptions&lt;CountryStateZipObjectContext&gt; options) : base(options)
    {
    }

    #endregion

    #region Utilities

    /// &lt;summary&gt;
    /// Further configuration the model
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;modelBuilder&quot;&gt;Model muilder&lt;/param&gt;
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new TaxRateMap());
        base.OnModelCreating(modelBuilder);
    }

    #endregion

    #region Methods

    /// &lt;summary&gt;
    /// Creates a DbSet that can be used to query and save instances of entity
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TEntity&quot;&gt;Entity type&lt;/typeparam&gt;
    /// &lt;returns&gt;A set for the given entity type&lt;/returns&gt;
    public new virtual DbSet&lt;TEntity&gt; Set&lt;TEntity&gt;() where TEntity : BaseEntity
    {
        return base.Set&lt;TEntity&gt;();
    }

    /// &lt;summary&gt;
    /// Generate a script to create all tables for the current model
    /// &lt;/summary&gt;
    /// &lt;returns&gt;A SQL script&lt;/returns&gt;
    public virtual string GenerateCreateScript()
    {
        return Database.GenerateCreateScript();
    }

    /// &lt;summary&gt;
    /// Creates a LINQ query for the query type based on a raw SQL query
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TQuery&quot;&gt;Query type&lt;/typeparam&gt;
    /// &lt;param name=&quot;sql&quot;&gt;The raw SQL query&lt;/param&gt;
    /// &lt;param name=&quot;parameters&quot;&gt;The values to be assigned to parameters&lt;/param&gt;
    /// &lt;returns&gt;An IQueryable representing the raw SQL query&lt;/returns&gt;
    public virtual IQueryable&lt;TQuery&gt; QueryFromSql&lt;TQuery&gt;(string sql, params object[] parameters) where TQuery : class
    {
        throw new NotImplementedException();
    }

    /// &lt;summary&gt;
    /// Creates a LINQ query for the entity based on a raw SQL query
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TEntity&quot;&gt;Entity type&lt;/typeparam&gt;
    /// &lt;param name=&quot;sql&quot;&gt;The raw SQL query&lt;/param&gt;
    /// &lt;param name=&quot;parameters&quot;&gt;The values to be assigned to parameters&lt;/param&gt;
    /// &lt;returns&gt;An IQueryable representing the raw SQL query&lt;/returns&gt;
    public virtual IQueryable&lt;TEntity&gt; EntityFromSql&lt;TEntity&gt;(string sql, params object[] parameters) where TEntity : BaseEntity
    {
        throw new NotImplementedException();
    }

    /// &lt;summary&gt;
    /// Executes the given SQL against the database
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sql&quot;&gt;The SQL to execute&lt;/param&gt;
    /// &lt;param name=&quot;doNotEnsureTransaction&quot;&gt;true - the transaction creation is not ensured; false - the transaction creation is ensured.&lt;/param&gt;
    /// &lt;param name=&quot;timeout&quot;&gt;The timeout to use for command. Note that the command timeout is distinct from the connection timeout, which is commonly set on the database connection string&lt;/param&gt;
    /// &lt;param name=&quot;parameters&quot;&gt;Parameters to use with the SQL&lt;/param&gt;
    /// &lt;returns&gt;The number of rows affected&lt;/returns&gt;
    public virtual int ExecuteSqlCommand(RawSqlString sql, bool doNotEnsureTransaction = false, int? timeout = null, params object[] parameters)
    {
        using (var transaction = Database.BeginTransaction())
        {
            var result = Database.ExecuteSqlCommand(sql, parameters);
            transaction.Commit();

            return result;
        }
    }

    /// &lt;summary&gt;
    /// Detach an entity from the context
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TEntity&quot;&gt;Entity type&lt;/typeparam&gt;
    /// &lt;param name=&quot;entity&quot;&gt;Entity&lt;/param&gt;
    public virtual void Detach&lt;TEntity&gt;(TEntity entity) where TEntity : BaseEntity
    {
        throw new NotImplementedException();
    }

    /// &lt;summary&gt;
    /// Install object context
    /// &lt;/summary&gt;
    public void Install()
    {
        //create tables
        this.ExecuteSqlScript(GenerateCreateScript());
    }

    /// &lt;summary&gt;
    /// Uninstall object context
    /// &lt;/summary&gt;
    public void Uninstall()
    {
        //drop the table
        this.DropPluginTable(nameof(TaxRate));
    }

    #endregion
}
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">For tax rates <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">CRUD</strong> operation, services are created. In this case, interface <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">ICountryStateZipService</strong> and class <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">CountryStateZipService</strong> is created. It contains method like <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">InsertTaxRate</code>, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">UpdateTaxRate</code>, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">DeleteTaxRate</code>, <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">GetAllTaxRates</code> and <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="349">GetTaxRateById</code>. These method names are self-explanatory and will be consumed by controllers. Other methods can be introduced/added based according to the requirements.</p>
<h3 id="icountrystatezipservicecs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="351">ICountryStateZipService.cs</h3>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="353">public partial interface ICountryStateZipService
{
    /// &lt;summary&gt;
    /// Deletes a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    void DeleteTaxRate(TaxRate taxRate);

    /// &lt;summary&gt;
    /// Gets all tax rates
    /// &lt;/summary&gt;
    /// &lt;returns&gt;Tax rates&lt;/returns&gt;
    IPagedList&lt;TaxRate&gt; GetAllTaxRates(int pageIndex = 0, int pageSize = int.MaxValue);

    /// &lt;summary&gt;
    /// Gets a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRateId&quot;&gt;Tax rate identifier&lt;/param&gt;
    /// &lt;returns&gt;Tax rate&lt;/returns&gt;
    TaxRate GetTaxRateById(int taxRateId);

    /// &lt;summary&gt;
    /// Inserts a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    void InsertTaxRate(TaxRate taxRate);

    /// &lt;summary&gt;
    /// Updates the tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    void UpdateTaxRate(TaxRate taxRate);
}
</code></pre>
<h4 id="countrystatezipservicecs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="389">CountryStateZipService.cs</h4>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="391">public partial class CountryStateZipService : ICountryStateZipService
{
    #region Fields

    private readonly IEventPublisher _eventPublisher;
    private readonly IRepository&lt;TaxRate&gt; _taxRateRepository;
    private readonly ICacheManager _cacheManager;

    #endregion

    #region Ctor

    /// &lt;summary&gt;
    /// Ctor
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;eventPublisher&quot;&gt;Event publisher&lt;/param&gt;
    /// &lt;param name=&quot;cacheManager&quot;&gt;Cache manager&lt;/param&gt;
    /// &lt;param name=&quot;taxRateRepository&quot;&gt;Tax rate repository&lt;/param&gt;
    public CountryStateZipService(IEventPublisher eventPublisher,
        ICacheManager cacheManager,
        IRepository&lt;TaxRate&gt; taxRateRepository)
    {
        _eventPublisher = eventPublisher;
        _cacheManager = cacheManager;
        _taxRateRepository = taxRateRepository;
    }

    #endregion

    #region Methods

    /// &lt;summary&gt;
    /// Deletes a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    public virtual void DeleteTaxRate(TaxRate taxRate)
    {
        if (taxRate == null)
            throw new ArgumentNullException(nameof(taxRate));

        _taxRateRepository.Delete(taxRate);

        //event notification
        _eventPublisher.EntityDeleted(taxRate);
    }

    /// &lt;summary&gt;
    /// Gets all tax rates
    /// &lt;/summary&gt;
    /// &lt;returns&gt;Tax rates&lt;/returns&gt;
    public virtual IPagedList&lt;TaxRate&gt; GetAllTaxRates(int pageIndex = 0, int pageSize = int.MaxValue)
    {
        var key = string.Format(ModelCacheEventConsumer.TAXRATE_ALL_KEY, pageIndex, pageSize);
        return _cacheManager.Get(key, () =&gt;
        {
            var query = from tr in _taxRateRepository.Table
                        orderby tr.StoreId, tr.CountryId, tr.StateProvinceId, tr.Zip, tr.TaxCategoryId
                        select tr;
            var records = new PagedList&lt;TaxRate&gt;(query, pageIndex, pageSize);
            return records;
        });
    }

    /// &lt;summary&gt;
    /// Gets a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRateId&quot;&gt;Tax rate identifier&lt;/param&gt;
    /// &lt;returns&gt;Tax rate&lt;/returns&gt;
    public virtual TaxRate GetTaxRateById(int taxRateId)
    {
        if (taxRateId == 0)
            return null;

       return _taxRateRepository.GetById(taxRateId);
    }

    /// &lt;summary&gt;
    /// Inserts a tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    public virtual void InsertTaxRate(TaxRate taxRate)
    {
        if (taxRate == null)
            throw new ArgumentNullException(nameof(taxRate));

        _taxRateRepository.Insert(taxRate);

        //event notification
        _eventPublisher.EntityInserted(taxRate);
    }

    /// &lt;summary&gt;
    /// Updates the tax rate
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;taxRate&quot;&gt;Tax rate&lt;/param&gt;
    public virtual void UpdateTaxRate(TaxRate taxRate)
    {
        if (taxRate == null)
            throw new ArgumentNullException(nameof(taxRate));

        _taxRateRepository.Update(taxRate);

        //event notification
        _eventPublisher.EntityUpdated(taxRate);
    }

    #endregion
}
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="502">The last thing, we need is to register the services and configure plugin DB context on application startup. For this, the <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="502">Infrastructure</strong> folder is added which contains classes – <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="502">DependencyRegister</code> and <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="502">PluginDbStartup</code>.</p>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="504"><strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="504">DependencyRegister</strong> class implements <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="504">IDependencyRegister</code> interface (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="504">Nop.Core.Infrastructure.DependencyManagement</code> namespace) which has <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="504">Register</code> method.</p>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="506">public class DependencyRegistrar : IDependencyRegistrar
{
    /// &lt;summary&gt;
    /// Register services and interfaces
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;builder&quot;&gt;Container builder&lt;/param&gt;
    /// &lt;param name=&quot;typeFinder&quot;&gt;Type finder&lt;/param&gt;
    /// &lt;param name=&quot;config&quot;&gt;Config&lt;/param&gt;
    public virtual void Register(ContainerBuilder builder, ITypeFinder typeFinder, NopConfig config)
    {
        builder.RegisterType&lt;FixedOrByCountryStateZipTaxProvider&gt;().As&lt;ITaxProvider&gt;().InstancePerLifetimeScope();
        builder.RegisterType&lt;CountryStateZipService&gt;().As&lt;ICountryStateZipService&gt;().InstancePerLifetimeScope();

        //data context
        builder.RegisterPluginDataContext&lt;CountryStateZipObjectContext&gt;(&quot;nop_object_context_tax_country_state_zip&quot;);

        //override required repository with our custom context
        builder.RegisterType&lt;EfRepository&lt;TaxRate&gt;&gt;().As&lt;IRepository&lt;TaxRate&gt;&gt;()
            .WithParameter(ResolvedParameter.ForNamed&lt;IDbContext&gt;(&quot;nop_object_context_tax_country_state_zip&quot;))
            .InstancePerLifetimeScope();
    }

    /// &lt;summary&gt;
    /// Order of this dependency registrar implementation
    /// &lt;/summary&gt;
    public int Order =&gt; 1;
}
</code></pre>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">Similarly, <strong sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">PluginDbStartup</strong> class implements <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">INopStartup</code> interface (<code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">Nop.Core.Infrastructure</code> namespace) which has <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">ConfigureServices</code> and <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">Configure</code> methods. For this example, object context is added in <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="536">ConfigureServices</code> method.</p>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="538">public class PluginDbStartup : INopStartup
{
    /// &lt;summary&gt;
    /// Add and configure any of the middleware
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;services&quot;&gt;Collection of service descriptors&lt;/param&gt;
    /// &lt;param name=&quot;configuration&quot;&gt;Configuration of the application&lt;/param&gt;
    public void ConfigureServices(IServiceCollection services, IConfiguration configuration)
    {
        //add object context
        services.AddDbContext&lt;CountryStateZipObjectContext&gt;(optionsBuilder =&gt;
        {
            optionsBuilder.UseSqlServerWithLazyLoading(services);
        });
    }

    /// &lt;summary&gt;
    /// Configure the using of added middleware
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;application&quot;&gt;Builder for configuring an application's request pipeline&lt;/param&gt;
    public void Configure(IApplicationBuilder application)
    {
    }

    /// &lt;summary&gt;
    /// Gets order of this startup configuration implementation
    /// &lt;/summary&gt;
    public int Order =&gt; 11;
}
</code></pre>
<h2 id="project-structure-of-tax-plugin" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="570">Project structure of Tax Plugin</h2>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="572"><img src="_static/how-to-write-a-tax-plugin-4.20/image8.png" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="572" alt="image8"></p>
<h2 id="handling-install-and-uninstall-methods" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="574">Handling &quot;Install&quot; and &quot;Uninstall&quot; methods</h2>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="576">This step is optional. Some plugins can require additional logic during their installation. For example, a plugin can insert new locale resources or add necessary tables or settings values. So open your <code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="576">BasePlugin</code> implementation and override the following methods:</p>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="578">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="578"><code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="578">Install</code>. This method will be invoked during plugin installation. You can initialize any settings here, insert new locale resources, or create some new database tables (if required).</li>
</ul>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="580">public override void Install()
{
    //database objects
    _objectContext.Install();

    //settings
    _settingService.SaveSetting(new FixedOrByCountryStateZipTaxSettings());

    //locales
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fixed&quot;, &quot;Fixed rate&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.TaxByCountryStateZip&quot;, &quot;By Country&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategoryName&quot;, &quot;Tax category&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Rate&quot;, &quot;Rate&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Store&quot;, &quot;Store&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Store.Hint&quot;, &quot;If an asterisk is selected, then this shipping rate will apply to all stores.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Country&quot;, &quot;Country&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Country.Hint&quot;, &quot;The country.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.StateProvince&quot;, &quot;State / province&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.StateProvince.Hint&quot;, &quot;If an asterisk is selected, then this tax rate will apply to all customers from the given country, regardless of the state.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Zip&quot;, &quot;Zip&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Zip.Hint&quot;, &quot;Zip / postal code. If zip is empty, then this tax rate will apply to all customers from the given country or state, regardless of the zip code.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategory&quot;, &quot;Tax category&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategory.Hint&quot;, &quot;The tax category.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Percentage&quot;, &quot;Percentage&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Percentage.Hint&quot;, &quot;The tax rate.&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.AddRecord&quot;, &quot;Add tax rate&quot;);
    _localizationService.AddOrUpdatePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.AddRecordTitle&quot;, &quot;New tax rate&quot;);

    base.Install();
}
</code></pre>
<ul sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="613">
<li sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="613"><code sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="613">Uninstall</code>. This method will be invoked during plugin uninstallation. You can remove previously initialized settings, locale resources, or database tables by plugin during installation.</li>
</ul>
<pre><code class="lang-cs" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="615">public override void Uninstall()
{
    //settings
    _settingService.DeleteSetting&lt;FixedOrByCountryStateZipTaxSettings&gt;();

    //fixed rates
    var fixedRates = _taxCategoryService.GetAllTaxCategories()
        .Select(taxCategory =&gt; _settingService.GetSetting(string.Format(FixedOrByCountryStateZipDefaults.FixedRateSettingsKey, taxCategory.Id)))
        .Where(setting =&gt; setting != null).ToList();
    _settingService.DeleteSettings(fixedRates);

    //database objects
    _objectContext.Uninstall();

    //locales
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fixed&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.TaxByCountryStateZip&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategoryName&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Rate&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Store&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Store.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Country&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Country.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.StateProvince&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.StateProvince.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Zip&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Zip.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategory&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.TaxCategory.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Percentage&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.Fields.Percentage.Hint&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.AddRecord&quot;);
    _localizationService.DeletePluginLocaleResource(&quot;Plugins.Tax.FixedOrByCountryStateZip.AddRecordTitle&quot;);

    base.Uninstall();
}
</code></pre>
<div class="IMPORTANT" sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="654">
<h5>Important</h5>
<p sourcefile="en/developer/plugins/how-to-write-tax-plugin-4.20.md" sourcestartlinenumber="655">If you override one of these methods, do not hide its base implementation -base.Install() and base.Uninstall().</p>
</div>

                  <div class="course-banner">
                      <a target="_blank" href="https://www.nopcommerce.com/training?utm_source=docs_nopcommerce&utm_medium=documentation&utm_campaign=course&utm_content=Developers_Guide">
                          <div class="course-banner-left"></div>
                          <div class="course-banner-center">
                              <div class="course-banner-title"><span>nopCommerce training course</span></div>
                              <div class="course-banner-description"><span>Start developing your skills and become a Certified Developer</span></div>
                          </div>
                          <div class="course-banner-right"></div>
                      </a> 
                  </div>            </article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/nopSolutions/nopCommerce-Docs/blob/master/en/developer/plugins/how-to-write-tax-plugin-4.20.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../../../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../../../styles/docfx.js"></script>
    <script type="text/javascript" src="../../../styles/main.js"></script>
  </body>
</html>
